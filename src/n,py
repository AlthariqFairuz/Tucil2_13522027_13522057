import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
from models import Point
from divide_and_conquer import create_bezier
from brute_force import brute_force_bezier

def visualize_curve(curve):
    x = [point.x for point in curve]
    y = [point.y for point in curve]

    plt.plot(x, y)
    plt.scatter(x, y, color='red')  # Menampilkan titik-titik kontrol
    plt.title('Bezier Curve')
    plt.xlabel('X-axis')
    plt.ylabel('Y-axis')
    plt.grid(True)
    plt.show()


print("Method available:")
print("1. Brute Force\n2. Divide and Conquer\n3. Exit\n")
method = int(input("Choose method: "))

while method not in [1, 2, 3]:
    print("Invalid method")
    method = int(input("Choose method: "))

if method == 3:
    print("Program exited.\n")
    exit()

n = int(input("Number of points: "))

print("Input your points")

# Mendapatkan input titik-titik dari pengguna
points_input = []
for i in range(n):  # Jumlah titik adalah 3 untuk contoh ini
    point_input = input(f"P{i+1}: ").split(",")
    points_input.append(Point(float(point_input[0]), float(point_input[1])))

iterations = int(input("Iterations: "))

if method == 1:
    curve = brute_force_bezier(points_input, iterations)
elif method == 2:
    curve = create_bezier(points_input, iterations)

# Animasi kurva Bezier
fig, ax = plt.subplots()
ax.set_xlim(min(point.x for point in points_input) - 2, max(point.x for point in points_input) + 2)  # Menyesuaikan batas sumbu x
ax.set_ylim(min(point.y for point in points_input) - 2, max(point.y for point in points_input) + 2)  # Menyesuaikan batas sumbu y
lines = []

def init():
    for line in lines:
        ax.add_line(line)  # Tambahkan semua garis ke plot
    return lines

def update(frame):
    x = [point.x for point in curve[:frame+1]]
    y = [point.y for point in curve[:frame+1]]
    line, = ax.plot(x, y, color=plt.cm.viridis(frame / len(curve)))  # Warna berbeda untuk setiap frame
    lines.append(line)
    return lines

ani = FuncAnimation(fig, update, frames=len(curve), init_func=init, blit=False)  # Jangan gunakan blit=True

plt.title('Bezier Curve Animation')
plt.xlabel('X-axis')
plt.ylabel('Y-axis')
plt.grid(True)
plt.show()


from models import Point

def bezier_curve(points: list[Point], t: float) -> Point:
    if len(points) == 1:
        return points[0]
    else:
        new_points = [Point((1-t) * points[i].x + t * points[i+1].x, (1-t) * points[i].y + t * points[i+1].y)
                      for i in range(len(points)-1)]
        return bezier_curve(new_points, t)

def brute_force_bezier(points: list[Point], iterations: int) -> list[Point]:
    curve = []
    for i in range(iterations+1):
        t = i / iterations
        point = bezier_curve(points, t)
        curve.append(point)
    return curve
